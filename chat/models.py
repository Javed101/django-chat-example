from django.db import models
from django.db.models import Q
# Create your models here.
from uuid import uuid4

from django.db import models
from django.contrib.auth import get_user_model


User = get_user_model()


def serialize_user(user):
    """Serialize user instance to JSON."""
    return {
        'id': user.id, 'username': user.username, 'email': user.email,
        'first_name': user.first_name, 'last_name': user.last_name
    }


class BaseModel(models.Model):
    """Abstract model to Track the creation/updated date for a model."""

    create_date = models.DateTimeField(auto_now_add=True)
    update_date = models.DateTimeField(auto_now=True)

    class Meta:
        abstract = True


def _generate_unique_uri():
    """Generates a unique uri for the chat group"""
    return str(uuid4()).replace('-', '')[:15]


class ChatGroup(BaseModel):
    """ A Chat Group. The uri's are generated by taking the first 15 characters from a UUID """

    user1 = models.ForeignKey(User, null=True, on_delete=models.PROTECT, related_name="user1")
    user2 = models.ForeignKey(User, null=True, on_delete=models.PROTECT, related_name="user2")
    unique_uri = models.URLField(unique=True, default=_generate_unique_uri)

    def __str__(self):
        return self.uri
    
    @staticmethod
    def get_unique_uri(user1, user2):
        obj = ChatGroup.objects.filter(Q(Q(user1=user1) & Q(user2=user2))| Q(Q(user2=user1) & Q(user1=user2)))
        if obj.count() >= 1:
            return obj.first().unique_uri
        else:
            obj = ChatGroup.objects.create(user1=user1, user2=user2)
            return obj.unique_uri


class Message(BaseModel):
    """Store messages for a group."""

    sender = models.ForeignKey(User, null=True, on_delete=models.PROTECT, related_name="message_sender")
    receiver = models.ForeignKey(User, null=True, on_delete=models.PROTECT, related_name="message_receiver")
    message = models.TextField(max_length=15000, null=True)

    def __str__(self):
        return self.message
    
    @staticmethod
    def get_conversation(sender=None, receiver=None):
        msg = []
        qq = Message.objects.filter(
            Q(
                Q(sender=sender) & Q(receiver=receiver)
            ) | 
            Q(
                Q(sender=receiver) & Q(receiver=sender)
            )
        ).order_by('create_date')
        for m in qq:
            msg.append(m.to_json())
        return msg

    def to_json(self):
        """serialize message to JSON."""
        return {
            'sender': serialize_user(self.sender),
            'receiver': serialize_user(self.receiver),
            'message': self.message,
            'msg_time': self.create_date.strftime("%b %d, %Y, %H:%M %p")
        }
